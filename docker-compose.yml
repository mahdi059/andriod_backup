services:
  web:
    build: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    command: >
      sh -c "./tools/wait-for-it.sh ${DATABASE_HOST}:${DATABASE_PORT} --timeout=60 --strict --
             python manage.py runserver 0.0.0.0:8000"

  celery:
    build: .
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    command: >
      sh -c "./tools/wait-for-it.sh ${DATABASE_HOST}:${DATABASE_PORT} --timeout=60 --strict --
             celery -A config worker --loglevel=info"

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"

  minio:
    image: minio/minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    volumes:
      - minio_data:/data

  postgres:
    image: postgres:15
    container_name: pg_backup
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

volumes:
  minio_data:
  pg_data:
